- var lunrIndex 

header.main-header
  nav.top-nav
    a(href="/" + lang + "/")
      img(id="nav-logo" src="/assets/media/images/logos/clf4d_logo_2020_lungo_exp.png" alt=labels.layout.header.logoAlt)
    .nav-links
      a(href="/" + lang + "/about").aquaunderline!= labels.layout.menu.about
      a( href="/" + lang + "/team").greenunderline!= labels.layout.menu.team
      a(href="/" + lang + "/blog").orangeunderline!= labels.layout.menu.blog
      a(href="/" + lang + "/labs").fuchsiaunderline!= labels.layout.menu.labs
      button(id="cta-button")!= labels.layout.menu.calltoaction
      a(href="/" + (lang=="en" ? "it" : "en") + "/" role="button")
        img(id="nav-lang" role="button" src="/assets/media/images/icons/lang-" + (lang=="en" ? "it" : "en")  + ".png" alt=labels.layout.menu.langIconAlt lang= (lang=="en" ? "it-IT" : "en-GB"))
      .search-container
        input(type="search" id="search-input" placeholder=lang=="en" ? "Search..." : "Cerca..." aria-label="Search")
        ul#searchResults
        button.search-button(aria-label="Toggle search")
          span.fa-solid.fa-magnifying-glass
        script.
          document.addEventListener('DOMContentLoaded', function() {
            const searchButton = document.querySelector('.search-button');
            const searchInput = document.querySelector('#search-input');
            let lunrIndex = null;
            let store = {};
           Promise.all([
              fetch('/assets/json/search-index.json').then(res => res.json()),
              fetch('/assets/json/page-titles.json').then(res => res.json())
            ])
              //- .then(response => {
              //-   if (!response.ok) throw new Error('Network response was not ok');
              //-   return response.json();
              //- })
              .then(([searchData, pageTitles]) => {

                lunrIndex = lunr.Index.load(searchData.index || searchData);
                store = searchData.store || {};

                function performSearch(query) {
                  const results = lunrIndex.search(query);
                  displayResults(results);
                }

                function displayResults(results) {
                  const searchResults = document.getElementById('searchResults');
                  searchResults.innerHTML = '';

                  if (results.length === 0) {
                    searchResults.style.display = 'none';
                    return;
                  }

                  searchResults.style.display = 'block';

                  results.forEach(result => {
                    const a = document.createElement('a');
                    a.href = result.ref;
                    a.textContent = pageTitles[result.ref] || store[result.ref].title || 'Untitled';
                    searchResults.appendChild(a);
                    searchResults.appendChild(document.createElement('br'));
                  });
                }

                searchInput.addEventListener('input', function() {
                  const query = this.value;
                  performSearch(query);
                });
              })
              .catch(error => console.error('Error loading search index global:', error));

            searchButton.addEventListener('click', function(e) {
              e.preventDefault();
              searchInput.classList.toggle('active');
              if (searchInput.classList.contains('active')) {
                searchInput.focus();
              }
            });

            document.addEventListener('click', function(e) {
              if (!e.target.closest('.search-container')) {
                searchInput.classList.remove('active');
              }
            });

            searchInput.addEventListener('keydown', function(e) {
              if (e.key === 'Escape') {
                searchInput.classList.remove('active');
              }
            });
          });

          function addCombinedRef(files, metalsmith, done) {
            Object.keys(files).forEach(function (file) {
              const data = files[file];
              let title = data.pageTitle || data.yamlProjectTitle;
              if (!title && data.contents) {
                const match = data.contents.toString().match(/<h1[^>]*>(.*?)<\/h1>/i);
                if (match && match[1]) {
                  title = match[1].trim();
                }
              }
              if (!title) title = 'Untitled';
              data.title = title;
              const site = 'CLF4D';
              const path = file.replace(/\\/g, '/').replace(/^src\//, '').replace(/\.md$/, '.html');
              data.site = site;
              data.url = '/' + path;
              data.combinedRef = `${site} | ${title}`;
              if (file.endsWith('.html')) {
                console.log(file, '->', data.title);
              }
              console.log(data.combinedRef);
            });
            done();
          }
        
      